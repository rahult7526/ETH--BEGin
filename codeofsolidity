// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;
contract TokenTsn{
    // initialize public variable to store token 
    string public nameOftoken;
    string public symbolOftoken;
    uint256 public AllSupply;
// mapping address to balances
    mapping(address => uint) public balances;
// creating a constructor to initialize token information
    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) {
        nameOftoken = _name;
        symbolOftoken = _symbol;
        AllSupply = _initialSupply;
        balances[msg.sender] = _initialSupply;
    }
    // creating mint function for creation of new tokens
    function mint(address _to, uint256 _value) public {
        AllSupply += _value;
        balances[_to] += _value;
    }
    //creating burn function to destroy tokens
    function burn(address _from, uint256 _value) public {
        require(balances[_from] >= _value, "Insufficient balance to burn");
        AllSupply -= _value;
        balances[_from] -= _value;

    }
}
